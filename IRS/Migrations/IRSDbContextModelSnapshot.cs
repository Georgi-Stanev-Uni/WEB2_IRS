// <auto-generated />
using IRS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IRS.Migrations
{
    [DbContext(typeof(IRSDbContext))]
    partial class IRSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CookOrder", b =>
                {
                    b.Property<string>("CooksID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrdersID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CooksID", "OrdersID");

                    b.HasIndex("OrdersID");

                    b.ToTable("CookOrder");
                });

            modelBuilder.Entity("CookToGoOrder", b =>
                {
                    b.Property<string>("CooksID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToGoOrdersID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CooksID", "ToGoOrdersID");

                    b.HasIndex("ToGoOrdersID");

                    b.ToTable("CookToGoOrder");
                });

            modelBuilder.Entity("IRS.Models.Cook", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManagerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Cooks");
                });

            modelBuilder.Entity("IRS.Models.Deliverer", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManagerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Deliverers");
                });

            modelBuilder.Entity("IRS.Models.Host", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManagerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("IRS.Models.Manager", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("IRS.Models.Order", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("TableID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaiterID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("WaiterID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("IRS.Models.Product", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Availability")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ToGoOrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ToGoOrderID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("IRS.Models.StorageItem", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("StorageItems");
                });

            modelBuilder.Entity("IRS.Models.Table", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HostID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WaiterID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("HostID");

                    b.HasIndex("OrderId");

                    b.HasIndex("WaiterID");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("IRS.Models.ToGoOrder", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DelivererID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HostID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ReceiverAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverPhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DelivererID");

                    b.HasIndex("HostID");

                    b.ToTable("ToGoOrders");
                });

            modelBuilder.Entity("IRS.Models.Waiter", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManagerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnWork")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Waiters");
                });

            modelBuilder.Entity("CookOrder", b =>
                {
                    b.HasOne("IRS.Models.Cook", null)
                        .WithMany()
                        .HasForeignKey("CooksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IRS.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CookToGoOrder", b =>
                {
                    b.HasOne("IRS.Models.Cook", null)
                        .WithMany()
                        .HasForeignKey("CooksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IRS.Models.ToGoOrder", null)
                        .WithMany()
                        .HasForeignKey("ToGoOrdersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IRS.Models.Cook", b =>
                {
                    b.HasOne("IRS.Models.Manager", null)
                        .WithMany("Cooks")
                        .HasForeignKey("ManagerID");
                });

            modelBuilder.Entity("IRS.Models.Deliverer", b =>
                {
                    b.HasOne("IRS.Models.Manager", null)
                        .WithMany("Deliverers")
                        .HasForeignKey("ManagerID");
                });

            modelBuilder.Entity("IRS.Models.Host", b =>
                {
                    b.HasOne("IRS.Models.Manager", null)
                        .WithMany("Hosts")
                        .HasForeignKey("ManagerID");
                });

            modelBuilder.Entity("IRS.Models.Order", b =>
                {
                    b.HasOne("IRS.Models.Waiter", null)
                        .WithMany("Orders")
                        .HasForeignKey("WaiterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IRS.Models.Product", b =>
                {
                    b.HasOne("IRS.Models.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderID");

                    b.HasOne("IRS.Models.ToGoOrder", null)
                        .WithMany("Products")
                        .HasForeignKey("ToGoOrderID");
                });

            modelBuilder.Entity("IRS.Models.StorageItem", b =>
                {
                    b.HasOne("IRS.Models.Product", null)
                        .WithMany("Items")
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("IRS.Models.Table", b =>
                {
                    b.HasOne("IRS.Models.Host", null)
                        .WithMany("Sector")
                        .HasForeignKey("HostID");

                    b.HasOne("IRS.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IRS.Models.Waiter", null)
                        .WithMany("Sector")
                        .HasForeignKey("WaiterID");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("IRS.Models.ToGoOrder", b =>
                {
                    b.HasOne("IRS.Models.Deliverer", null)
                        .WithMany("ToGoOrders")
                        .HasForeignKey("DelivererID");

                    b.HasOne("IRS.Models.Host", null)
                        .WithMany("ToGoOrders")
                        .HasForeignKey("HostID");
                });

            modelBuilder.Entity("IRS.Models.Waiter", b =>
                {
                    b.HasOne("IRS.Models.Manager", null)
                        .WithMany("Waiters")
                        .HasForeignKey("ManagerID");
                });

            modelBuilder.Entity("IRS.Models.Deliverer", b =>
                {
                    b.Navigation("ToGoOrders");
                });

            modelBuilder.Entity("IRS.Models.Host", b =>
                {
                    b.Navigation("Sector");

                    b.Navigation("ToGoOrders");
                });

            modelBuilder.Entity("IRS.Models.Manager", b =>
                {
                    b.Navigation("Cooks");

                    b.Navigation("Deliverers");

                    b.Navigation("Hosts");

                    b.Navigation("Waiters");
                });

            modelBuilder.Entity("IRS.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("IRS.Models.Product", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("IRS.Models.ToGoOrder", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("IRS.Models.Waiter", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Sector");
                });
#pragma warning restore 612, 618
        }
    }
}
